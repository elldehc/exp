import torch
from torch import nn
from env2 import EDGE_NODE_NUM,EDGE_CLUSTER_NUM,CLOUD_NODE_NUM,CLOUD_CLUSTER_NUM,HISTORY_NUM,TASK_PER_CLUSTER,RES_MAP,FPS_MAP,ECOST,CCOST,ECCOST,FAILC,EDGE_BW,CLOUD_BW,EDGE_RTT,CLOUD_RTT,EDGE_MEM,CLOUD_MEM,EDGE_GPU_MEM,CLOUD_GPU_MEM,EDGE_GPU,CLOUD_GPU


# input size=(EDGE_NODE_NUM+CLOUD_NODE_NUM*CLOUD_CLUSTER_NUM)*3+3*TASK_PER_CLUSTER
# output size=6
class Actor(nn.Module):
    def __init__(self):
        super().__init__()
        self.relu=nn.ReLU()
        self.conv1=nn.Conv1d(3,16,1,padding="same")
        self.fc1=nn.Linear((EDGE_NODE_NUM+CLOUD_NODE_NUM*CLOUD_CLUSTER_NUM)*16,128)
        
        self.fc_res=nn.Linear(128*3,5)
        self.fc_fr=nn.Linear(128*3,5)
        self.fc_estep=nn.Linear(128*3,5)
        self.fc_enode=nn.Linear(128*3,5)
        self.fc_ccluster=nn.Linear(128*3,2)
        self.fc_cnode=nn.Linear(128*3,5)
        
    def forward(self,res,pref):
        y=self.conv1(res)
        y=self.relu(y)
        y=torch.reshape(y,[-1,y.shape[1]*y.shape[2]])
        y=self.fc1(y)
        y=self.relu(y)
        y=torch.einsum("bn,blm->blnm",y,pref)
        y=torch.reshape(y,[-1,y.shape[1],y.shape[2]*y.shape[3]])
        y_res=self.fc_res(y)
        y_res=nn.Softmax(1)(y_res)
        y_fr=self.fc_fr(y)
        y_fr=nn.Softmax(1)(y_fr)
        y_estep=self.fc_estep(y)
        y_estep=nn.Softmax(1)(y_estep)
        y_enode=self.fc_enode(y)
        y_enode=nn.Softmax(1)(y_enode)
        y_ccluster=self.fc_ccluster(y)
        y_ccluster=nn.Softmax(1)(y_ccluster)
        y_cnode=self.fc_cnode(y)
        y_cnode=nn.Softmax(1)(y_cnode)
        return y_res,y_fr,y_estep,y_enode,y_ccluster,y_cnode
    
# input size=EDGE_CLUSTER_NUM*TASK_PER_CLUSTER*(5+5+5+5+2+5)+(EDGE_NODE_NUM+CLOUD_NODE_NUM*CLOUD_CLUSTER_NUM)*3
# output size=EDGE_CLUSTER_NUM
class Critic(nn.Module):
    def __init__(self):
        super().__init__()
        self.relu=nn.ReLU()
        self.fc_acc_res=nn.Linear(5,128)
        self.fc_acc_fr=nn.Linear(5,128)
        self.fc_acc=nn.Linear(256,1)
        self.fc_esize_res=nn.Linear(5,128)
        self.fc_esize_fr=nn.Linear(5,128)
        self.fc_esize=nn.Linear(256,1)
        self.fc_csize_res=nn.Linear(5,128)
        self.fc_csize_fr=nn.Linear(5,128)
        self.fc_csize=nn.Linear(256,1)
        self.fc_ecomp_res=nn.Linear(5,128)
        self.fc_ecomp_fr=nn.Linear(5,128)
        self.fc_ecomp=nn.Linear(256,1)
        self.fc_ccomp_res=nn.Linear(5,128)
        self.fc_ccomp_fr=nn.Linear(5,128)
        self.fc_ccomp=nn.Linear(256,1)
        
        self.lstm=nn.LSTM((EDGE_NODE_NUM+CLOUD_NODE_NUM)*5,128,1,batch_first=True)
        self.conv1=nn.Conv2d(5,10,5,2)
        self.bn1=nn.BatchNorm2d(10)
        self.conv2=nn.Conv2d(10,10,3,"same")
        self.bn2=nn.BatchNorm2d(10)
        self.conv3=nn.Conv2d(10,10,3,"same")
        self.bn3=nn.BatchNorm2d(10)
        self.pool1=nn.MaxPool2d(2)
        self.conv4=nn.Conv2d(10,20,3,"same")
        self.bn4=nn.BatchNorm2d(20)
        self.conv5=nn.Conv2d(20,20,3,"same")
        self.bn5=nn.BatchNorm2d(20)
        self.conv6=nn.Conv2d(20,20,3,"same")
        self.bn6=nn.BatchNorm2d(20)
        self.fc_sr_res=nn.Linear(5,128)
        self.fc_sr_fr=nn.Linear(5,128)
        self.fc_sr_estep=nn.Linear(5,128)
        self.fc_sr=nn.Linear((HISTORY_NUM+1)*(EDGE_NODE_NUM+CLOUD_NODE_NUM)//16*20*3+128*3,1)
        

    def forward(self,res,pref,y_action):
        y_res,y_fr,y_estep,y_enode,y_cnode=y_action
        t1=self.fc_acc_res(y_res)
        t1=self.relu(t1)
        t2=self.fc_acc_fr(y_fr)
        t2=self.relu(t2)
        acc=self.fc_acc(torch.concat([t1,t2],dim=1))
        acc=nn.Sigmoid()(acc)
        t1=self.fc_esize_res(y_res)
        t1=self.relu(t1)
        t2=self.fc_esize_fr(y_fr)
        t2=self.relu(t2)
        esize=self.fc_esize(torch.concat([t1,t2],dim=1))
        # esize=nn.Sigmoid()(esize)
        t1=self.fc_csize_res(y_res)
        t1=self.relu(t1)
        t2=self.fc_csize_fr(y_fr)
        t2=self.relu(t2)
        csize=self.fc_csize(torch.concat([t1,t2],dim=1))
        # csize=nn.Sigmoid()(csize)
        t1=self.fc_ecomp_res(y_res)
        t1=self.relu(t1)
        t2=self.fc_ecomp_fr(y_fr)
        t2=self.relu(t2)
        ecomp=self.fc_ecomp(torch.concat([t1,t2],dim=1))
        # ecomp=nn.Sigmoid()(ecomp)
        t1=self.fc_ccomp_res(y_res)
        t1=self.relu(t1)
        t2=self.fc_ccomp_fr(y_fr)
        t2=self.relu(t2)
        ccomp=self.fc_ccomp(torch.concat([t1,t2],dim=1))
        # ccomp=nn.Sigmoid()(ccomp)
        const_size=torch.einsum("ab,b->a",y_res,torch.tensor(RES_MAP,device="cuda"))*torch.einsum("ab,b->a",y_fr,torch.tensor(FPS_MAP,device="cuda"))
        ettime=const_size*esize/EDGE_BW+EDGE_RTT
        cttime=const_size*csize/CLOUD_BW+CLOUD_RTT
        latency=ettime+cttime+ecomp/y_egpu+ccomp/y_cgpu
        cost=ecomp*ECOST+ccomp*torch.einsum("ab,b->a",y_cnode,torch.tensor(CCOST,device="cuda"))+csize*ECCOST
        value=acc*pref[:,0]+latency*pref[:,1]+cost*pref[:,2]
        print(res.shape,y_enode.shape,y_cnode.shape)
        y=res*torch.concat([y_enode,y_cnode],dim=1)
        print(y.shape)
        y=self.conv1(res)
        y=self.relu(y)
        y=self.bn1(y)
        y=self.conv2(y)
        y=self.relu(y)
        y=self.bn2(y)
        y=self.conv2(y)
        y=self.relu(y)
        y=self.bn2(y)
        y=self.conv3(y)
        y=self.relu(y)
        y=self.bn3(y)
        y=self.pool1(y)
        y=self.conv4(y)
        y=self.relu(y)
        y=self.bn4(y)
        y=self.conv5(y)
        y=self.relu(y)
        y=self.bn5(y)
        y=self.conv6(y)
        y=self.relu(y)
        y=self.bn6(y)
        y=torch.reshape(y,[-1,y.shape[1]*y.shape[2]*y.shape[3]])
        t_res=self.fc_sr_res(y_res)
        t_res=self.relu(t_res)
        t_fr=self.fc_sr_fr(y_fr)
        t_fr=self.relu(t_fr)
        t_estep=self.fc_sr_estep(y_estep)
        t_estep=self.relu(t_estep)
        sr=self.fc_sr(torch.concat([y,t_res,t_fr,t_estep],dim=1))
        sr=nn.Sigmoid()(sr)
        return sr*value+(1-sr)*FAILC
    